{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Jupyter SCAD","text":"<p>Jupyter SCAD provides rendering and interactive visualization for 3D objects described in SolidPython2 within a Jupyter notebook. Additionally, it provides interactive visualization for STLs.</p> <p>This program is focused on the use case of generating stl files with Python (aka SolidPython2) interactively within a Jupyter notebook.</p> <p>SolidPython2 generates OpenSCAD language code from Python code. Jupyter SCAD then uses OpenSCAD to render the OpenSCAD code to a 3D model and provides interactive visualization. As an alternative to SolidPython2, the OpenSCAD code can also be provided directly.</p>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Jupyter SCAD can be installed with <code>pip</code>:</p> <pre><code>pip install jupyterscad\n</code></pre> <p>An OpenSCAD object can be defined using SolidPython2, viewed in a Jupyter notebook, and saved to an <code>stl</code> file with:</p> <pre><code>from jupyterscad import view\nfrom solid2 import cube\n\nview(cube([1.5,2,1],center=True), outfile='cube.stl')\n</code></pre> <p></p> <p>See the Usage page for more examples.</p>"},{"location":"#status-mature","title":"Status: MATURE","text":"<p>This project has reached it's goal, a basic Jupyter notebook viewer for SolidPython2, and no further improvements are planned.</p>"},{"location":"#license","title":"License","text":"<p>Jupyter SCAD is licensed under the GNU GENERAL PUBLIC LICENSE.</p>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#jupyterscad.view","title":"<code>jupyterscad.view(obj, width=400, height=400, grid_unit=-1, outfile=None, openscad_exec=None)</code>","text":"<p>View an OpenSCAD object.</p> <p>Typical usage example:</p> <pre><code>&gt;&gt;&gt; view(cube(3))\n</code></pre> <p>Parameters:</p> <ul> <li> <code>obj</code>         \u2013          <p>OpenSCAD object to visualize.</p> </li> <li> <code>width</code>             (<code>int</code>, default:                 <code>400</code> )         \u2013          <p>Visualization pixel width on page.</p> </li> <li> <code>height</code>             (<code>int</code>, default:                 <code>400</code> )         \u2013          <p>Visualization pixel height on page.</p> </li> <li> <code>grid_unit</code>             (<code>float</code>, default:                 <code>-1</code> )         \u2013          <p>Grid cell size, 0 to disable, -1 for automatic.</p> </li> <li> <code>outfile</code>             (<code>Optional[Union[str, PathLike]]</code>, default:                 <code>None</code> )         \u2013          <p>Name of stl file to generate. No stl file is generated if None.</p> </li> <li> <code>openscad_exec</code>             (<code>Optional[Union[str, PathLike]]</code>, default:                 <code>None</code> )         \u2013          <p>Path to openscad executable.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Renderer</code>         \u2013          <p>Rendering to be displayed.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>OpenSCADError</code>           \u2013          <p>An error occurred running OpenSCAD.</p> </li> </ul>"},{"location":"api/#jupyterscad.view_stl","title":"<code>jupyterscad.view_stl(stl_file, width=400, height=400, grid_unit=-1)</code>","text":"<p>View a stl.</p> <p>Typical usage example:</p> <pre><code>&gt;&gt;&gt; view_stl(cube(3))\n</code></pre> <p>Parameters:</p> <ul> <li> <code>stl_file</code>             (<code>Union[str, PathLike]</code>)         \u2013          <p>stl file to visualize.</p> </li> <li> <code>width</code>             (<code>int</code>, default:                 <code>400</code> )         \u2013          <p>Visualization pixel width on page.</p> </li> <li> <code>height</code>             (<code>int</code>, default:                 <code>400</code> )         \u2013          <p>Visualization pixel height on page.</p> </li> <li> <code>grid_unit</code>             (<code>float</code>, default:                 <code>-1</code> )         \u2013          <p>Grid cell size, 0 to disable, -1 for automatic</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Renderer</code>         \u2013          <p>Rendering to be displayed.</p> </li> </ul>"},{"location":"api/#jupyterscad.render_stl","title":"<code>jupyterscad.render_stl(obj, outfile, openscad_exec=None)</code>","text":"<p>Render a stl from an OpenSCAD object.</p> <p>Typical usage example:</p> <pre><code>&gt;&gt;&gt; render_stl(cube(3), 'cube.stl')\n</code></pre> <p>Parameters:</p> <ul> <li> <code>obj</code>         \u2013          <p>OpenSCAD object to visualize.</p> </li> <li> <code>outfile</code>             (<code>Union[str, PathLike]</code>)         \u2013          <p>Name of stl file to generate. No stl file is generated if None.</p> </li> <li> <code>openscad_exec</code>             (<code>Optional[Union[str, PathLike]]</code>, default:                 <code>None</code> )         \u2013          <p>Path to openscad executable.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>OpenSCADException</code>           \u2013          <p>An error occurred running OpenSCAD.</p> </li> </ul>"},{"location":"usage/","title":"Usage Examples","text":""},{"location":"usage/#defining-an-openscad-object","title":"Defining an OpenSCAD object","text":"<p>An OpenSCAD object can be defined using SolidPython2 or OpenSCAD.</p>"},{"location":"usage/#solidpython2","title":"SolidPython2","text":"<pre><code>from solid2 import cube\nobj = cube([1.5,2,1],center=True)\n</code></pre>"},{"location":"usage/#openscad","title":"OpenSCAD","text":"<pre><code>obj = 'cube([1.5,2,1],center=true);'\n</code></pre> <p>Note: If a 3D object description integrates an external stl file, then the stl must be in the same directory as the notebook running the code.</p> <p>See the OpenSCAD language and SolidPython2 pages for more information on how to use these tools.</p>"},{"location":"usage/#rendering-and-viewing-an-openscad-object","title":"Rendering and Viewing an OpenSCAD object","text":""},{"location":"usage/#visualizing-and-rendering-to-an-stl","title":"Visualizing and Rendering to an stl","text":"<p>To visualize an OpenSCAD object, use <code>view</code>:</p> <p><pre><code>from jupyterscad import view\nfrom solid2 import cube\n\nobj = cube([1.5,2,1],center=True)\nview(obj)\n</code></pre> </p> <p>The rendered 3D OpenSCAD object can also save the stl file by defining 'outfile':</p> <pre><code>from jupyterscad import view\nfrom solid2 import cube\n\nobj = cube([1.5,2,1],center=True)\nview(obj, outfile='obj.stl')\n</code></pre>"},{"location":"usage/#rendering-directly-to-an-stl","title":"Rendering directly to an stl","text":"<p>An stl can be generated directly without visualization with:</p> <pre><code>from jupyterscad import render_stl\n\nrender_stl(obj, 'obj.stl')\n</code></pre>"},{"location":"usage/#visualizing-an-stl","title":"Visualizing an stl","text":"<p>A stl can be visualized with:</p> <pre><code>from jupyterscad import view_stl\n\nview_stl('obj.stl')\n</code></pre>"},{"location":"usage/#adjusting-grid-size","title":"Adjusting grid size","text":"<p>In <code>view</code> and <code>view_stl</code>, the grid unit is autoscaled to the model. The grid unit can be set to e.g. <code>10</code> with <code>grid_unit=10</code>, disabled with <code>grid_unit=0</code> or manually set to automatic scaling with <code>grid_unit=-1</code>.</p>"}]}